#!/bin/bash

set -euo pipefail

# ---- Help function -----------------------------------------------------------
show_help() {
  cat << EOF
Usage: ./cleanup.sh [OPTIONS]

Clean up Airweave Docker containers, volumes, and configuration files.

OPTIONS:
  -h, --help              Show this help message and exit
  --profile PROFILE       Specify Docker Compose profile to stop (production, development, openai, local)
                          Default: local
  --all                   Stop all profiles (ignores --profile flag)
  --remove-volumes        Remove Docker volumes (WARNING: deletes all data)
  --remove-env            Remove .env file (can be regenerated by start.sh)
  --full                  Full cleanup: containers, volumes, .env file
  --noninteractive        Run in non-interactive mode (skip confirmation prompts)

EXAMPLES:
  ./cleanup.sh                              # Stop containers (local profile)
  ./cleanup.sh --all                        # Stop all containers (all profiles)
  ./cleanup.sh --profile production         # Stop production profile containers
  ./cleanup.sh --remove-volumes             # Stop containers and remove volumes
  ./cleanup.sh --full                       # Complete cleanup (containers + volumes + .env)
  ./cleanup.sh --full --noninteractive      # Full cleanup without prompts

WARNING:
  - Using --remove-volumes will delete all database data, embeddings, and cached data
  - Using --remove-env will delete your API keys and configuration
  - Use --full for a complete reset to initial state

For more information, visit: https://github.com/airweave-ai/airweave
EOF
  exit 0
}

# ---- Optional flags/env ------------------------------------------------------
NONINTERACTIVE="${NONINTERACTIVE:-}"
PROFILE="${PROFILE:-local}"
REMOVE_VOLUMES=false
REMOVE_ENV=false
STOP_ALL=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help) show_help ;;
    --profile) PROFILE="$2"; shift 2 ;;
    --all) STOP_ALL=true; shift ;;
    --remove-volumes) REMOVE_VOLUMES=true; shift ;;
    --remove-env) REMOVE_ENV=true; shift ;;
    --full) REMOVE_VOLUMES=true; REMOVE_ENV=true; shift ;;
    --noninteractive) NONINTERACTIVE=1; shift ;;
    *) echo "Unknown arg: $1"; echo "Use --help for usage information."; exit 2 ;;
  esac
done

# Validate profile if not stopping all
if [ "$STOP_ALL" = false ]; then
  case "$PROFILE" in
    production|development|openai|local) ;;
    *) echo "Error: Invalid profile '$PROFILE'. Valid profiles: production, development, openai, local"; exit 1 ;;
  esac
fi

# ---- Helpers -----------------------------------------------------------------
have_cmd() { command -v "$1" >/dev/null 2>&1; }

# ---- Compose tool selection ---------------------------------------------------
if docker compose version >/dev/null 2>&1; then
  COMPOSE_CMD="docker compose"
elif docker-compose --version >/dev/null 2>&1; then
  COMPOSE_CMD="docker-compose"
elif podman-compose --version > /dev/null 2>&1; then
  COMPOSE_CMD="podman-compose"
else
  echo "Neither 'docker compose', 'docker-compose', nor 'podman-compose' found. Please install Docker Compose."
  exit 1
fi

# Check if Docker daemon is running
if docker info > /dev/null 2>&1; then
    CONTAINER_CMD="docker"
elif have_cmd podman && podman info > /dev/null 2>&1; then
    CONTAINER_CMD="podman"
else
    echo "Error: Docker daemon is not running. Please start Docker and try again."
    exit 1
fi

echo "Using commands: ${CONTAINER_CMD} and ${COMPOSE_CMD}"
echo ""

# ---- Confirmation prompts (unless --noninteractive) --------------------------
if [ -z "${NONINTERACTIVE}" ]; then
  echo "‚ö†Ô∏è  Cleanup Summary:"
  echo "===================="
  if [ "$STOP_ALL" = true ]; then
    echo "- Stop all containers (all profiles)"
  else
    echo "- Stop containers for profile: $PROFILE"
  fi
  if [ "$REMOVE_VOLUMES" = true ]; then
    echo "- Remove volumes: YES (‚ö†Ô∏è  ALL DATA WILL BE DELETED)"
  else
    echo "- Remove volumes: NO"
  fi
  if [ "$REMOVE_ENV" = true ]; then
    echo "- Remove .env file: YES (‚ö†Ô∏è  API keys and config will be deleted)"
  else
    echo "- Remove .env file: NO"
  fi
  echo ""
  read -p "Do you want to continue? (y/n): " CONFIRM
  if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
    echo "Cleanup cancelled."
    exit 0
  fi
  echo ""
fi

# ---- Handle missing .env file -----------------------------------------------
# Docker Compose requires .env file to exist (referenced in docker-compose.yml)
# Create a temporary minimal .env if it doesn't exist
TEMP_ENV_CREATED=false
if [ ! -f .env ]; then
  echo "‚ÑπÔ∏è  .env file not found, creating temporary .env for shutdown..."
  touch .env
  TEMP_ENV_CREATED=true
fi

# ---- Stop containers ---------------------------------------------------------
COMPOSE_FILES="-f docker/docker-compose.yml"

if [ "$STOP_ALL" = true ]; then
  echo "üõë Stopping all containers..."

  # Stop each profile to ensure all containers are stopped
  for profile in production development openai local; do
    echo "   Stopping profile: $profile"
    $COMPOSE_CMD $COMPOSE_FILES --env-file .env --profile $profile down 2>/dev/null || true
  done
else
  echo "üõë Stopping containers for profile: $PROFILE..."
  $COMPOSE_CMD $COMPOSE_FILES --env-file .env --profile $PROFILE down 2>/dev/null || true
fi

echo "‚úÖ Containers stopped"

# Clean up temporary .env if we created it and user didn't request to remove it
if [ "$TEMP_ENV_CREATED" = true ] && [ "$REMOVE_ENV" = false ]; then
  rm .env 2>/dev/null || true
fi

# ---- Remove volumes ----------------------------------------------------------
if [ "$REMOVE_VOLUMES" = true ]; then
  echo ""
  echo "üóëÔ∏è  Removing Docker volumes..."

  # Remove volumes
  $CONTAINER_CMD volume rm airweave_postgres_data 2>/dev/null && echo "   ‚úÖ Removed postgres_data" || echo "   ‚ÑπÔ∏è  postgres_data volume not found"
  $CONTAINER_CMD volume rm airweave_redis_data 2>/dev/null && echo "   ‚úÖ Removed redis_data" || echo "   ‚ÑπÔ∏è  redis_data volume not found"
  $CONTAINER_CMD volume rm airweave_qdrant_data 2>/dev/null && echo "   ‚úÖ Removed qdrant_data" || echo "   ‚ÑπÔ∏è  qdrant_data volume not found"

  # Also try alternate volume names (in case of different prefix)
  $CONTAINER_CMD volume rm postgres_data 2>/dev/null && echo "   ‚úÖ Removed postgres_data" || true
  $CONTAINER_CMD volume rm redis_data 2>/dev/null && echo "   ‚úÖ Removed redis_data" || true
  $CONTAINER_CMD volume rm qdrant_data 2>/dev/null && echo "   ‚úÖ Removed qdrant_data" || true

  echo "‚úÖ Volumes cleanup complete"
fi

# ---- Remove .env file --------------------------------------------------------
if [ "$REMOVE_ENV" = true ]; then
  echo ""
  echo "üóëÔ∏è  Removing .env file..."

  if [ -f .env ]; then
    rm .env
    echo "‚úÖ .env file removed"
  else
    echo "‚ÑπÔ∏è  .env file not found"
  fi
fi

# ---- Remove orphaned containers ----------------------------------------------
echo ""
echo "üßπ Checking for orphaned airweave containers..."
ORPHANED_CONTAINERS=$(${CONTAINER_CMD} ps -a --filter "name=airweave" --format "{{.Names}}" 2>/dev/null | tr '\n' ' ' || true)

if [ -n "$ORPHANED_CONTAINERS" ]; then
  echo "   Found orphaned containers: $ORPHANED_CONTAINERS"
  ${CONTAINER_CMD} rm -f $ORPHANED_CONTAINERS || true
  echo "‚úÖ Orphaned containers removed"
else
  echo "‚úÖ No orphaned containers found"
fi

# ---- Clean up network --------------------------------------------------------
echo ""
echo "üßπ Cleaning up Docker network..."
${CONTAINER_CMD} network rm airweave-network 2>/dev/null && echo "‚úÖ Network removed" || echo "‚ÑπÔ∏è  Network not found or still in use"

# ---- Final summary -----------------------------------------------------------
echo ""
echo "=========================================="
echo "üéâ Cleanup completed successfully!"
echo "=========================================="
echo ""

if [ "$REMOVE_ENV" = true ] || [ "$REMOVE_VOLUMES" = true ]; then
  echo "‚ÑπÔ∏è  To start fresh, run: ./start.sh"
  if [ "$REMOVE_ENV" = true ]; then
    echo "   (You'll be prompted to enter your API keys again)"
  fi
else
  echo "‚ÑπÔ∏è  To restart services, run: ./start.sh"
fi
echo ""
