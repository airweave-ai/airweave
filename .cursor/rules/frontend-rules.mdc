---
globs: **/frontend/**
alwaysApply: false
---
# Airweave Frontend Architecture & Guidelines

## Tech Stack & Core Technologies
- **React 18** with TypeScript for type-safe component development
- **Vite** for fast development builds and HMR
- **TailwindCSS** with **ShadCN UI** components for consistent design
- **Radix UI** primitives with **Lucide** icons for accessible components
- **React Router** for client-side routing with file-based organization
- **Zustand** for state management with persistence
- **React Query** for server state and data fetching
- **Auth0** for authentication with custom context wrapper
- **SSE (Server-Sent Events)** for real-time sync progress

## Project Structure
```
frontend/src/
├── components/         # Reusable UI components
│   ├── ui/            # ShadCN UI primitives
│   ├── shared/        # Shared business components
│   └── [feature]/     # Feature-specific components
├── pages/             # Route-level components
├── lib/               # Core utilities and providers
│   ├── api.ts         # API client with auth integration
│   ├── stores/        # Zustand state stores
│   └── auth-context.tsx # Auth provider
├── hooks/             # Custom React hooks
├── services/          # Business logic services
├── config/            # Configuration files
├── constants/         # App constants
└── styles/            # Global CSS styles
    └── toast.css      # Custom toast styling
```

## API Layer (`lib/api.ts`)

The API client is the central hub for all backend communication with sophisticated features:

### Core Features
- **Token Management**: Automatic token injection via provider pattern
- **Request Queuing**: Queues requests while auth initializes
- **Organization Context**: Auto-injects `X-Organization-ID` header
- **Session Tracking**: Auto-injects `X-Airweave-Session-ID` header with PostHog session ID for session replay linking
- **Auto-Retry**: Refreshes token on 401/403 and retries
- **Organization Auto-Switching**: Detects resource org mismatches and switches context
- **Type-Safe Responses**: Returns typed Response objects

### Usage Pattern
```typescript
// Always use relative paths (no /api/v1 prefix)
const response = await apiClient.get('/collections');
const response = await apiClient.post('/source-connections', data);
const response = await apiClient.delete('/api-keys', { id: keyId });
```

### Token Provider Pattern
The API client uses a pluggable token provider set up in `main.tsx`:
```typescript
setTokenProvider({
  getToken: async () => await auth.getToken(),
  clearToken: () => auth.clearToken(),
  isReady: () => auth.isReady()
});
```

## State Management Architecture

### 1. **Organization Store** (`stores/organizations.ts`)
- Manages user organizations with persistence
- Handles organization switching with state cleanup
- Auto-selects best organization (current → primary → first)
- Clears org-specific data on switch (collections, API keys)

### 2. **Collections Store** (`stores/collections.ts`)
- Caches collections and source connections
- Implements event-driven updates via custom event bus
- Smart caching with force refresh option
- Handles collection CRUD events automatically

### 3. **Auth Store** (`stores/auth-store.ts`)
- Persists user authentication state
- Minimal store for auth state tracking

### 4. **Sync State Store** (`stores/syncStateStore.ts`)
- Real-time sync progress via SSE
- Manages multiple concurrent subscriptions
- Session storage for progress persistence
- Automatic cleanup and health checks

### 5. **API Keys Store** (`stores/apiKeys.ts`)
- Organization-scoped API key management
- Auto-clears on organization switch

## Authentication Flow

### Auth0 Integration
1. **Provider Hierarchy**:
   ```
   PostHogProvider → ThemeProvider → BrowserRouter → Auth0Provider → AuthProvider → ApiAuthConnector → App
   ```
   - **PostHogProvider**: Initializes PostHog analytics and session tracking (outermost)
   - **ThemeProvider**: Manages dark/light theme persistence
   - **BrowserRouter**: React Router client-side routing
   - **Auth0Provider**: Handles user authentication
   - **AuthProvider**: Manages token lifecycle and auth state
   - **ApiAuthConnector**: Connects auth to API client

2. **Auth Context** (`lib/auth-context.tsx`):
   - Manages Auth0 token lifecycle
   - Provides `getToken()` for API calls
   - Handles dev mode (auth disabled)
   - Token initialization tracking

3. **Auth Guard** (`components/AuthGuard.tsx`):
   - Protects routes requiring authentication
   - Initializes organizations on first load
   - Redirects to `/no-organization` if needed

### OAuth2 Source Authentication
- Separate OAuth flow for connecting data sources
- State preserved in sessionStorage during redirect
- Handles both standard and SemanticMcp flows
- Error recovery with detailed user feedback

## Component Patterns

### 1. **Dialog Flow System** (`components/shared/DialogFlow.tsx`)
- Multi-step dialog orchestration
- State preservation across OAuth redirects
- Error handling with retry capabilities
- Flexible view composition

### 2. **View Components**
- Encapsulate specific UI flows
- Accept `viewData` prop for state
- Use `onNext`, `onBack`, `onCancel` callbacks
- Handle errors via `onError` prop

### 3. **Error Handling Pattern**
```typescript
const handleError = (error: Error | string, errorSource?: string) => {
  if (onError) {
    onError(error, errorSource);
  } else {
    redirectWithError(navigate, {
      serviceName: errorSource,
      errorMessage: error.message,
      dialogId: viewData?.dialogId
    });
  }
};
```

## Real-Time Features

### SSE (Server-Sent Events)
- Used for sync job progress updates
- Automatic reconnection handling
- Progress persistence across page reloads
- Multiple concurrent subscriptions

### Event Bus System
- Custom events for collection updates
- Window-level event dispatching
- Auto-refresh on CRUD operations

## Routing Architecture

### Route Structure
```typescript
// Public routes (no auth required)
/login
/callback
/semantic-mcp
/no-organization

// Protected routes (auth required)
/ (dashboard)
/collections
/collections/:readable_id
/organization/settings
```

### Route Protection
- `AuthGuard` wrapper for protected routes
- Organization initialization on first access
- Automatic redirects for unauthenticated users

## Error Handling & User Feedback

### Error Utils (`lib/error-utils.ts`)
- Centralized error storage in localStorage
- Redirect with error context preservation
- Dialog-specific error targeting via `dialogId`

### Toast Notifications

#### Setup & Configuration
- **Sonner** library with custom styling via `toast-custom` class
- Global CSS import: `import '@/styles/toast.css'` in `App.tsx`
- Toaster configured with `className: 'toast-custom'` for custom styling

#### Toast Types & Patterns
```typescript
import { toast } from 'sonner';

// Success notifications (green theme)
toast.success('Operation completed successfully');

// Error notifications (red theme)
toast.error('Something went wrong');

// Info notifications (blue theme)
toast.info('Additional information');

// Warning notifications (yellow theme)
toast.warning('Please review this action');
```

#### Custom Styling Features
- **Enhanced animations**: Slide-in from right with custom easing
- **Type-specific styling**: Each toast type has distinct colors and borders
- **Colored left border**: Visual indicator for toast type
- **Consistent theming**: Uses CSS variables for dark/light mode
- **Hover effects**: Subtle transform and shadow changes

#### Usage Guidelines
- Use appropriate toast types for different scenarios
- Keep messages concise and actionable
- Avoid overusing toasts for non-critical information
- Organization switch notifications use success type

### Error Views
- `ConnectionErrorView` for connection failures
- Retry capabilities with state restoration
- Technical details with copy functionality

## Development Patterns

### 1. **TypeScript Usage**
- Strict typing for all components
- Interface definitions for props
- Type inference where possible
- Avoid `any` types
- Always try to user interfaces defined universally in /types/index.ts (which wrap Pydantic schemas defined in backend)

### 2. **Component Organization**
```typescript
// Standard component structure
interface ComponentProps {
  // Required props first
  onAction: () => void;
  data: DataType;
  // Optional props with defaults
  variant?: 'primary' | 'secondary';
}

export const Component: React.FC<ComponentProps> = ({
  onAction,
  data,
  variant = 'primary'
}) => {
  // Hooks first
  const [state, setState] = useState();

  // Effects next
  useEffect(() => {}, []);

  // Handlers
  const handleClick = () => {};

  // Render
  return <div>...</div>;
};
```

### 3. **State Management Best Practices**
- Use Zustand stores for global state
- React Query for server state
- Local state for UI-only concerns
- Custom hooks for shared logic

### 4. **API Integration Patterns**
```typescript
// Always check response.ok
const response = await apiClient.get('/endpoint');
if (!response.ok) {
  throw new Error(`Failed: ${response.status}`);
}
const data = await response.json();

// Handle loading states
const [isLoading, setIsLoading] = useState(false);
try {
  setIsLoading(true);
  // ... API call
} finally {
  setIsLoading(false);
}
```

### 5. **Styling Guidelines**
- Use Tailwind classes with `cn()` utility
- Component variants with CVA
- Consistent spacing with Tailwind scale
- Dark mode support via CSS variables

## Performance Optimizations

### 1. **Data Caching**
- Collections cached until force refresh
- Source details cached by short name
- API keys cached per organization

### 2. **Request Deduplication**
- Prevents duplicate requests while loading
- Smart organization context switching
- Request queuing during auth init

### 3. **Component Optimization**
- Memoization for expensive computations
- Callback refs for stable references
- Lazy loading for route components

## Security Considerations

### 1. **Token Management**
- Tokens never exposed in URLs
- Automatic cleanup on logout
- Secure storage in Auth0

### 2. **Organization Isolation**
- API automatically scopes to current org
- State cleared on organization switch
- Proper access control checks

### 3. **Error Handling**
- Sensitive data stripped from errors
- No credentials in localStorage
- Secure OAuth state management
