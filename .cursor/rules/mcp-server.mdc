---
description: MCP (Model Context Protocol) server architecture and implementation
globs: **/mcp/**
alwaysApply: false
---
# Airweave MCP Server Architecture

## Overview

The Airweave MCP Server provides search capabilities for AI assistants through the Model Context Protocol (MCP). It supports both local desktop clients and cloud-based AI platforms.

## Deployment Modes

### 1. Local Mode (Desktop AI Clients)
- **Transport**: stdio (standard input/output)
- **Target**: Claude Desktop, Cursor, and other desktop AI assistants
- **Entry Point**: `src/index.ts`
- **Installation**: npm package or npx
- **Architecture**: Single-tenant, one server instance per user's local environment
- **Authentication**: API key from environment variables

### 2. Hosted Mode (Cloud AI Platforms)
- **Transport**: Streamable HTTP (MCP 2025-03-26)
- **Target**: OpenAI Agent Builder and cloud-based AI platforms
- **Entry Point**: `src/index-http.ts`
- **Deployment**: Azure Kubernetes Service
- **URL**: `https://mcp.airweave.ai`
- **Architecture**: Multi-tenant, per-session server instances with isolated API keys
- **Authentication**: API key per request via headers or query parameters

**Key Difference**: Hosted mode creates separate `McpServer` instances for each session/API key combination, ensuring complete isolation between different users and allowing API key changes without server restart.

## Architecture Components

### Core Server (`src/server.ts`)
- **McpServer**: Main MCP server instance
- **Tool Registration**: Dynamic tool creation based on collection
- **Airweave Client**: API client for search operations
- **Environment Validation**: Configuration validation for both modes

### Streamable HTTP Server (`src/index-http.ts`)
- **Express App**: HTTP server with health checks and info endpoints
- **Streamable HTTP Transport**: Modern MCP 2025-03-26 transport for bidirectional communication
- **Request Handling**: POST `/mcp` endpoint for all MCP requests
- **Session Management**: Per-session server instances with independent API keys
- **Authentication**: API key extraction from headers or query parameters per request

### Tools
- **Search Tool**: `search-{collection}` - Main search functionality with natural language queries
- **Config Tool**: `get-config` - Server configuration display

## Key Features

### Search Capabilities
- Natural language queries with full parameter control
- AI completion responses
- Pagination control (limit/offset)
- Recency bias configuration
- Score thresholds and filtering

### Authentication
- Multiple API key methods:
  - `Authorization: Bearer <key>`
  - `X-API-Key: <key>`
  - Query parameters: `?apiKey=<key>` or `?api_key=<key>`

### Error Handling
- Comprehensive error responses
- Structured logging with timestamps
- Graceful connection handling

## Configuration

### Environment Variables
- `AIRWEAVE_COLLECTION`: Target collection name
- `AIRWEAVE_BASE_URL`: API base URL (default: production)
- `PORT`: Server port (default: 8080)

### Client Configuration
- API key provided by client (not server environment)
- Collection-specific tool naming
- Dynamic configuration per connection

## Implementation Details

### Streamable HTTP Transport Pattern
```typescript
// Session management: Map session IDs to { server, transport, apiKey }
const sessions = new Map<string, { server: McpServer, transport: StreamableHTTPServerTransport, apiKey: string }>();

// Handle all MCP requests with per-session isolation
app.post('/mcp', async (req, res) => {
    // Extract API key from request
    const apiKey = req.headers['x-api-key'] || req.headers['authorization']?.replace('Bearer ', '');
    
    // Get or create session
    const sessionId = req.headers['mcp-session-id'] || generateSessionId();
    let session = sessions.get(sessionId);
    
    if (!session || session.apiKey !== apiKey) {
        // Create new server instance with API key
        const server = createMcpServer(apiKey);
        const transport = new StreamableHTTPServerTransport({ sessionIdGenerator: () => sessionId });
        await server.connect(transport);
        session = { server, transport, apiKey };
        sessions.set(sessionId, session);
    }
    
    // Handle request with session's transport
    await session.transport.handleRequest(req, res, req.body);
});
```

### Tool Registration
- Dynamic tool names based on collection
- Schema validation with Pydantic-like structure
- Async handlers for all operations

## Development Guidelines

### Code Structure
- TypeScript with strict typing
- Async/await for all I/O operations
- Comprehensive error handling
- Structured logging

### Testing
- **MCP Server Tests** (`tests/mcp-server.test.ts`): Core functionality tests including tool registration, parameter passing, response formatting, and error handling
- **HTTP Transport Tests** (`tests/http-transport.test.ts`): Session management, API key authentication, and multi-tenant behavior
- **Test Commands**: `npm run test:mcp`, `npm run test:http`, `npm run test:all`

### Deployment
- Docker containerization
- Kubernetes deployment manifests
- Health check endpoints
- Graceful shutdown handling