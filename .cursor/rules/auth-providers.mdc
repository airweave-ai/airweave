---
globs: **/auth_providers/**
alwaysApply: false
---
# Airweave Auth Providers

## Overview
Auth providers enable third-party services (Pipedream, Composio) to supply credentials for source connections, eliminating manual credential management and enabling OAuth at scale for agent developers who are already using these connector providers.

## Architecture

### Core Components
```
platform/auth_providers/
├── _base.py              # BaseAuthProvider abstract class
├── pipedream.py          # OAuth2 provider (tokens expire in 3600s)
├── composio.py           # API key provider
└── klavis.py             # Future provider
```

### Provider Registration
```python
@auth_provider(
    name="Pipedream",
    short_name="pipedream",
    auth_type=AuthType.oauth2_with_refresh,
    auth_config_class="PipedreamAuthConfig",
    config_class="PipedreamConfig"
)
class PipedreamAuthProvider(BaseAuthProvider):
    async def create(credentials, config): ...
    async def get_creds_for_source(source_short_name, fields): ...
```

### Provider Configuration
Providers have several configuration mechanisms:

#### Field Mappings
Map between Airweave and external service naming:
```python
# Map Airweave field names to provider field names
FIELD_NAME_MAPPING = {"api_key": "generic_api_key", "personal_access_token": "access_token"}

# Map Airweave source names to provider source names (only needed when names differ)
SLUG_NAME_MAPPING = {
    "google_drive": "googledrive", 
    "google_slides": "googleslides",
    "outlook_mail": "outlook"
}
```


## Integration with TokenManager

The `TokenManager` class orchestrates token refresh during long-running syncs:

### Initialization
```python
# SyncFactory creates TokenManager with optional auth provider
token_manager = TokenManager(
    db=db,
    source_connection=connection,
    auth_provider_instance=auth_provider,  # Optional
    initial_credentials=credentials
)
```

### Refresh Flow
1. **Check refresh capability** (`_determine_refresh_capability()`):
   - Direct injection tokens → no refresh
   - Auth provider present → always refreshable
   - Standard OAuth → attempt refresh

2. **Proactive refresh** (`get_valid_token()`):
   - Refreshes tokens every 25 minutes (before 1-hour expiry)
   - Uses async lock to prevent concurrent refreshes
   - Falls back to stored token if refresh fails

3. **Auth provider refresh** (`_refresh_via_auth_provider()`):
   ```python
   # TokenManager calls auth provider for fresh credentials
   fresh_creds = await auth_provider.get_creds_for_source(
       source_short_name="slack",
       source_auth_config_fields=["access_token", "refresh_token"]
   )
   # Updates database with new credentials
   await crud.integration_credential.update(db, credential, fresh_creds)
   ```

4. **Fallback OAuth refresh** (`_refresh_via_oauth()`):
   - Uses oauth2_service if no auth provider
   - Creates separate DB session to avoid transaction issues

### Credential Priority (in SyncFactory)
1. Direct token injection (highest)
2. Auth provider instance
3. Database credentials with OAuth refresh

## Database Schema
- **auth_providers**: Provider definitions from decorators
- **auth_provider_connections**: User's configured providers (encrypted)
- **source_connections**: Links to auth provider via `auth_provider_connection_id`
# Airweave Auth Providers


### Pipedream Proxy Authentication

Pipedream supports two authentication modes depending on the OAuth client type:

#### Direct Mode (Custom OAuth Clients)
- Used when accounts are connected via custom OAuth clients
- Credentials are retrievable and used directly by sources
- Standard authentication flow

#### Proxy Mode (Default OAuth Clients)
- Required when using Pipedream's default OAuth client
- Credentials are not exposed for security
- All API requests route through Pipedream's proxy endpoint
- Pipedream injects authentication credentials server-side

The system automatically detects which mode to use:
1. Attempts to retrieve credentials
2. If unavailable (default OAuth), switches to proxy mode
3. Sources use `PipedreamProxyClient` transparently

**Benefits:**
- Supports both custom and default OAuth clients
- Maintains security for default OAuth credentials
- Transparent to source implementations (same API)
- No code changes needed in individual sources

**Technical Details:**
- Proxy URL: `https://api.pipedream.com/v1/connect/{project_id}/proxy/{encoded_url}`
- Auth headers stripped and injected by Pipedream
- Non-auth headers forwarded with `x-pd-proxy-` prefix
